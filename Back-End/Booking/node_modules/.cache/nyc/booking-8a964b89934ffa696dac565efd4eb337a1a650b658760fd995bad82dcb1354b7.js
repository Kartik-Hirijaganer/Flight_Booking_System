function cov_2ileepi5ri(){var path="D:\\Capgemini Training\\FLight_Booking_System\\back-End\\Booking\\booking.js";var hash="2e9e32ed262289a43c0a15d8999d4e8a03f14c33";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Capgemini Training\\FLight_Booking_System\\back-End\\Booking\\booking.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:12},end:{line:2,column:21}},"2":{start:{line:3,column:19},end:{line:3,column:41}},"3":{start:{line:4,column:13},end:{line:4,column:28}},"4":{start:{line:6,column:18},end:{line:6,column:40}},"5":{start:{line:9,column:21},end:{line:9,column:45}},"6":{start:{line:10,column:18},end:{line:10,column:47}},"7":{start:{line:13,column:0},end:{line:13,column:27}},"8":{start:{line:14,column:0},end:{line:14,column:49}},"9":{start:{line:17,column:17},end:{line:17,column:36}},"10":{start:{line:19,column:0},end:{line:19,column:30}},"11":{start:{line:20,column:16},end:{line:20,column:41}},"12":{start:{line:23,column:0},end:{line:25,column:3}},"13":{start:{line:24,column:2},end:{line:24,column:36}},"14":{start:{line:28,column:23},end:{line:42,column:1}},"15":{start:{line:45,column:20},end:{line:45,column:48}},"16":{start:{line:46,column:0},end:{line:46,column:76}},"17":{start:{line:62,column:0},end:{line:71,column:2}},"18":{start:{line:63,column:2},end:{line:70,column:4}},"19":{start:{line:65,column:4},end:{line:65,column:31}},"20":{start:{line:67,column:4},end:{line:69,column:5}},"21":{start:{line:68,column:6},end:{line:68,column:44}},"22":{start:{line:92,column:0},end:{line:113,column:3}},"23":{start:{line:94,column:17},end:{line:94,column:59}},"24":{start:{line:95,column:14},end:{line:95,column:16}},"25":{start:{line:96,column:2},end:{line:112,column:5}},"26":{start:{line:98,column:4},end:{line:105,column:5}},"27":{start:{line:99,column:23},end:{line:103,column:7}},"28":{start:{line:104,column:6},end:{line:104,column:29}},"29":{start:{line:107,column:4},end:{line:107,column:32}},"30":{start:{line:109,column:4},end:{line:111,column:5}},"31":{start:{line:110,column:6},end:{line:110,column:16}},"32":{start:{line:117,column:16},end:{line:117,column:19}},"33":{start:{line:118,column:16},end:{line:118,column:18}},"34":{start:{line:119,column:0},end:{line:146,column:3}},"35":{start:{line:120,column:19},end:{line:120,column:40}},"36":{start:{line:121,column:2},end:{line:121,column:34}},"37":{start:{line:123,column:19},end:{line:138,column:3}},"38":{start:{line:139,column:19},end:{line:139,column:42}},"39":{start:{line:140,column:4},end:{line:145,column:7}},"40":{start:{line:141,column:4},end:{line:141,column:34}},"41":{start:{line:142,column:4},end:{line:142,column:49}},"42":{start:{line:143,column:4},end:{line:143,column:16}},"43":{start:{line:144,column:4},end:{line:144,column:35}},"44":{start:{line:169,column:0},end:{line:174,column:3}},"45":{start:{line:170,column:2},end:{line:173,column:4}},"46":{start:{line:171,column:4},end:{line:171,column:35}},"47":{start:{line:172,column:4},end:{line:172,column:37}},"48":{start:{line:179,column:0},end:{line:184,column:3}},"49":{start:{line:180,column:2},end:{line:182,column:3}},"50":{start:{line:181,column:4},end:{line:181,column:21}},"51":{start:{line:183,column:2},end:{line:183,column:40}},"52":{start:{line:186,column:0},end:{line:186,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:23,column:117},end:{line:23,column:118}},loc:{start:{line:23,column:121},end:{line:25,column:1}},line:23},"1":{name:"(anonymous_1)",decl:{start:{line:62,column:24},end:{line:62,column:25}},loc:{start:{line:62,column:38},end:{line:71,column:1}},line:62},"2":{name:"(anonymous_2)",decl:{start:{line:63,column:22},end:{line:63,column:23}},loc:{start:{line:63,column:32},end:{line:66,column:3}},line:63},"3":{name:"(anonymous_3)",decl:{start:{line:66,column:11},end:{line:66,column:12}},loc:{start:{line:66,column:18},end:{line:70,column:3}},line:66},"4":{name:"(anonymous_4)",decl:{start:{line:92,column:40},end:{line:92,column:41}},loc:{start:{line:92,column:54},end:{line:113,column:1}},line:92},"5":{name:"(anonymous_5)",decl:{start:{line:96,column:39},end:{line:96,column:40}},loc:{start:{line:96,column:51},end:{line:108,column:3}},line:96},"6":{name:"(anonymous_6)",decl:{start:{line:108,column:11},end:{line:108,column:12}},loc:{start:{line:108,column:20},end:{line:112,column:3}},line:108},"7":{name:"(anonymous_7)",decl:{start:{line:119,column:45},end:{line:119,column:46}},loc:{start:{line:119,column:57},end:{line:146,column:1}},line:119},"8":{name:"(anonymous_8)",decl:{start:{line:140,column:25},end:{line:140,column:26}},loc:{start:{line:140,column:30},end:{line:145,column:5}},line:140},"9":{name:"(anonymous_9)",decl:{start:{line:169,column:41},end:{line:169,column:42}},loc:{start:{line:169,column:53},end:{line:174,column:1}},line:169},"10":{name:"(anonymous_10)",decl:{start:{line:170,column:60},end:{line:170,column:61}},loc:{start:{line:170,column:72},end:{line:173,column:3}},line:170},"11":{name:"(anonymous_11)",decl:{start:{line:179,column:17},end:{line:179,column:18}},loc:{start:{line:179,column:26},end:{line:184,column:1}},line:179}},branchMap:{"0":{loc:{start:{line:67,column:4},end:{line:69,column:5}},type:"if",locations:[{start:{line:67,column:4},end:{line:69,column:5}},{start:{line:67,column:4},end:{line:69,column:5}}],line:67},"1":{loc:{start:{line:109,column:4},end:{line:111,column:5}},type:"if",locations:[{start:{line:109,column:4},end:{line:111,column:5}},{start:{line:109,column:4},end:{line:111,column:5}}],line:109},"2":{loc:{start:{line:180,column:2},end:{line:182,column:3}},type:"if",locations:[{start:{line:180,column:2},end:{line:182,column:3}},{start:{line:180,column:2},end:{line:182,column:3}}],line:180}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2e9e32ed262289a43c0a15d8999d4e8a03f14c33"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2ileepi5ri=function(){return actualCoverage;};}return actualCoverage;}cov_2ileepi5ri();const express=(cov_2ileepi5ri().s[0]++,require('express'));const app=(cov_2ileepi5ri().s[1]++,express());const bodyParser=(cov_2ileepi5ri().s[2]++,require('body-parser'));const cors=(cov_2ileepi5ri().s[3]++,require('cors'));const sendEmail=(cov_2ileepi5ri().s[4]++,require('./sendEmail'));//swagger libraries
const swaggerJsDoc=(cov_2ileepi5ri().s[5]++,require("swagger-jsdoc"));const swaggerUi=(cov_2ileepi5ri().s[6]++,require("swagger-ui-express"));//middleware
cov_2ileepi5ri().s[7]++;app.use(bodyParser.json());cov_2ileepi5ri().s[8]++;app.use(cors({origin:'http://localhost:4200'}));//mongoose
const mongoose=(cov_2ileepi5ri().s[9]++,require('mongoose'));cov_2ileepi5ri().s[10]++;require('./bookingDataModel');const booking=(cov_2ileepi5ri().s[11]++,mongoose.model("booking"));cov_2ileepi5ri().s[12]++;mongoose.connect('mongodb+srv://Kartik:1234@cluster0.nvlfp.mongodb.net/booking_project?retryWrites=true&w=majority',()=>{cov_2ileepi5ri().f[0]++;cov_2ileepi5ri().s[13]++;console.log('Database connected');});//swagger
const swaggerOptions=(cov_2ileepi5ri().s[14]++,{swaggerDefinition:{info:{version:"1.0.0",title:"Booking Microservice",description:"Booking microservice constains http methods",contact:{name:"BookMyFlight"},servers:["http://localhost:3300"]}},apis:["booking.js"]});//swagger middleware
const swaggerDocs=(cov_2ileepi5ri().s[15]++,swaggerJsDoc(swaggerOptions));cov_2ileepi5ri().s[16]++;app.use("/booking/api-docs",swaggerUi.serve,swaggerUi.setup(swaggerDocs));//GET METHOD
/**
 * @swagger
 * /booking/all:
 *  get:
 *    description: Use to get all bookings
 *    responses:
 *      '200':
 *        description: A successful response
 *      '400':
 *        description: Server error.
 */cov_2ileepi5ri().s[17]++;app.get("/booking/all",(req,res)=>{cov_2ileepi5ri().f[1]++;cov_2ileepi5ri().s[18]++;booking.find().then(data=>{cov_2ileepi5ri().f[2]++;cov_2ileepi5ri().s[19]++;//console.log(data);
res.status(200).send(data);}).catch(err=>{cov_2ileepi5ri().f[3]++;cov_2ileepi5ri().s[20]++;if(err){cov_2ileepi5ri().b[0][0]++;cov_2ileepi5ri().s[21]++;res.status(400).json(`Error: ${err}`);}else{cov_2ileepi5ri().b[0][1]++;}});});/**
 * @swagger
 * /booking/allbookings/{userId}:
 *  get:
 *    description: Use to get all bookings of that user
 *    responses:
 *      '200':
 *        description: A successful response
 *      '400':
 *        description: Server error.
 *  parameters:
 *        - in: path
 *          name: userId
 *          required: true
 *          schema:
 *            type: String
 *          description: User Object Id
 */cov_2ileepi5ri().s[22]++;app.get('/booking/allbookings/:userId',(req,res)=>{cov_2ileepi5ri().f[4]++;//console.log('inside get'+req.params.userId);
var objectId=(cov_2ileepi5ri().s[23]++,mongoose.Types.ObjectId(req.params.userId));var myArr=(cov_2ileepi5ri().s[24]++,[]);cov_2ileepi5ri().s[25]++;booking.find({userId:objectId}).then(response=>{cov_2ileepi5ri().f[5]++;cov_2ileepi5ri().s[26]++;for(let i of response){let bookingObj=(cov_2ileepi5ri().s[27]++,{flight:i.flight,bookingId:i.bookingId,userDetails:i.userDetails});cov_2ileepi5ri().s[28]++;myArr.push(bookingObj);}//console.log(myArr);
cov_2ileepi5ri().s[29]++;res.status(200).send(myArr);}).catch(err=>{cov_2ileepi5ri().f[6]++;cov_2ileepi5ri().s[30]++;if(err){cov_2ileepi5ri().b[1][0]++;cov_2ileepi5ri().s[31]++;throw err;}else{cov_2ileepi5ri().b[1][1]++;}});});//POST METHOD
var bookingId=(cov_2ileepi5ri().s[32]++,200);var userEmail=(cov_2ileepi5ri().s[33]++,'');cov_2ileepi5ri().s[34]++;app.post("/booking/add/:flightName/:userId",(req,res)=>{cov_2ileepi5ri().f[7]++;let flightName=(cov_2ileepi5ri().s[35]++,req.params.flightName);cov_2ileepi5ri().s[36]++;userEmail=req.body.user.email;//console.log(userEmail);
var newBooking=(cov_2ileepi5ri().s[37]++,{userId:mongoose.Types.ObjectId(req.params.userId),flight:{flightName:flightName,airLine:req.body.flight.airLine,source:req.body.flight.source,destination:req.body.flight.destination,fare:req.body.flight.fare},userDetails:{firstName:req.body.user.firstName,lastName:req.body.user.lastName,email:req.body.user.email},bookingId:bookingId});var booking1=(cov_2ileepi5ri().s[38]++,new booking(newBooking));cov_2ileepi5ri().s[39]++;booking1.save().then(()=>{cov_2ileepi5ri().f[8]++;cov_2ileepi5ri().s[40]++;sendEmail.mailSend(userEmail);cov_2ileepi5ri().s[41]++;res.status(200).json({bookingId:bookingId});cov_2ileepi5ri().s[42]++;bookingId++;cov_2ileepi5ri().s[43]++;console.log('booking success');});});//DELETE BOOKING
/**
 * @swagger
 * /booking/cancel/{bookingId}:
 *  delete:
 *    description: Use to cancel
 *    responses:
 *      '200':
 *        description: Booking successfully cancelled
 *      '400':
 *        description: Server error.
 *  parameters:
 *        - in: path
 *          name: bookingId
 *          required: true
 *          schema:
 *            type: number
 *          description: bookingId
 */cov_2ileepi5ri().s[44]++;app.delete("/booking/cancel/:bookingId",(req,res)=>{cov_2ileepi5ri().f[9]++;cov_2ileepi5ri().s[45]++;booking.deleteOne({bookingId:req.params.bookingId}).then(response=>{cov_2ileepi5ri().f[10]++;cov_2ileepi5ri().s[46]++;res.status(200).send(response);cov_2ileepi5ri().s[47]++;console.log("booking cancelled");});});cov_2ileepi5ri().s[48]++;app.listen(3300,err=>{cov_2ileepi5ri().f[11]++;cov_2ileepi5ri().s[49]++;if(err){cov_2ileepi5ri().b[2][0]++;cov_2ileepi5ri().s[50]++;console.log(err);}else{cov_2ileepi5ri().b[2][1]++;}cov_2ileepi5ri().s[51]++;console.log("Listening to port 3300");});cov_2ileepi5ri().s[52]++;module.exports=app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,