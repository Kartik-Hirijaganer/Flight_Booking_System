function cov_1qr47l0jt4(){var path="D:\\Capgemini Training\\Kartik_Hirijaganer\\Flight-Booking\\Back-End\\Admin\\admin.js";var hash="214a2e430cfca29bccf3988f1f90d37d7ff334d9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Capgemini Training\\Kartik_Hirijaganer\\Flight-Booking\\Back-End\\Admin\\admin.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:12},end:{line:2,column:21}},"2":{start:{line:3,column:19},end:{line:3,column:41}},"3":{start:{line:4,column:14},end:{line:4,column:30}},"4":{start:{line:5,column:13},end:{line:5,column:28}},"5":{start:{line:8,column:21},end:{line:8,column:45}},"6":{start:{line:9,column:18},end:{line:9,column:47}},"7":{start:{line:12,column:0},end:{line:12,column:27}},"8":{start:{line:13,column:0},end:{line:13,column:49}},"9":{start:{line:16,column:23},end:{line:30,column:1}},"10":{start:{line:33,column:20},end:{line:33,column:48}},"11":{start:{line:34,column:0},end:{line:34,column:74}},"12":{start:{line:53,column:0},end:{line:65,column:3}},"13":{start:{line:54,column:2},end:{line:64,column:5}},"14":{start:{line:55,column:4},end:{line:55,column:40}},"15":{start:{line:59,column:4},end:{line:59,column:42}},"16":{start:{line:121,column:0},end:{line:140,column:3}},"17":{start:{line:122,column:18},end:{line:128,column:3}},"18":{start:{line:130,column:2},end:{line:139,column:5}},"19":{start:{line:131,column:3},end:{line:131,column:39}},"20":{start:{line:132,column:3},end:{line:132,column:36}},"21":{start:{line:135,column:4},end:{line:138,column:5}},"22":{start:{line:137,column:6},end:{line:137,column:44}},"23":{start:{line:173,column:0},end:{line:195,column:3}},"24":{start:{line:174,column:18},end:{line:180,column:3}},"25":{start:{line:182,column:2},end:{line:194,column:7}},"26":{start:{line:186,column:6},end:{line:186,column:42}},"27":{start:{line:189,column:6},end:{line:189,column:44}},"28":{start:{line:217,column:0},end:{line:228,column:3}},"29":{start:{line:218,column:2},end:{line:227,column:5}},"30":{start:{line:220,column:4},end:{line:220,column:40}},"31":{start:{line:222,column:4},end:{line:222,column:42}},"32":{start:{line:235,column:0},end:{line:240,column:2}},"33":{start:{line:236,column:2},end:{line:238,column:3}},"34":{start:{line:237,column:4},end:{line:237,column:21}},"35":{start:{line:239,column:2},end:{line:239,column:40}},"36":{start:{line:242,column:0},end:{line:242,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:53,column:26},end:{line:53,column:27}},loc:{start:{line:53,column:40},end:{line:65,column:1}},line:53},"1":{name:"(anonymous_1)",decl:{start:{line:54,column:50},end:{line:54,column:51}},loc:{start:{line:54,column:64},end:{line:57,column:3}},line:54},"2":{name:"(anonymous_2)",decl:{start:{line:58,column:9},end:{line:58,column:10}},loc:{start:{line:58,column:16},end:{line:64,column:3}},line:58},"3":{name:"(anonymous_3)",decl:{start:{line:121,column:30},end:{line:121,column:31}},loc:{start:{line:121,column:44},end:{line:140,column:1}},line:121},"4":{name:"(anonymous_4)",decl:{start:{line:130,column:65},end:{line:130,column:66}},loc:{start:{line:130,column:77},end:{line:133,column:3}},line:130},"5":{name:"(anonymous_5)",decl:{start:{line:134,column:9},end:{line:134,column:10}},loc:{start:{line:134,column:16},end:{line:139,column:3}},line:134},"6":{name:"(anonymous_6)",decl:{start:{line:173,column:34},end:{line:173,column:35}},loc:{start:{line:173,column:48},end:{line:195,column:1}},line:173},"7":{name:"(anonymous_7)",decl:{start:{line:184,column:11},end:{line:184,column:12}},loc:{start:{line:184,column:25},end:{line:187,column:5}},line:184},"8":{name:"(anonymous_8)",decl:{start:{line:188,column:11},end:{line:188,column:12}},loc:{start:{line:188,column:18},end:{line:194,column:5}},line:188},"9":{name:"(anonymous_9)",decl:{start:{line:217,column:47},end:{line:217,column:48}},loc:{start:{line:217,column:61},end:{line:228,column:1}},line:217},"10":{name:"(anonymous_10)",decl:{start:{line:218,column:84},end:{line:218,column:85}},loc:{start:{line:218,column:98},end:{line:221,column:3}},line:218},"11":{name:"(anonymous_11)",decl:{start:{line:221,column:12},end:{line:221,column:13}},loc:{start:{line:221,column:21},end:{line:227,column:3}},line:221},"12":{name:"(anonymous_12)",decl:{start:{line:235,column:17},end:{line:235,column:18}},loc:{start:{line:235,column:26},end:{line:240,column:1}},line:235}},branchMap:{"0":{loc:{start:{line:135,column:4},end:{line:138,column:5}},type:"if",locations:[{start:{line:135,column:4},end:{line:138,column:5}},{start:{line:135,column:4},end:{line:138,column:5}}],line:135},"1":{loc:{start:{line:236,column:2},end:{line:238,column:3}},type:"if",locations:[{start:{line:236,column:2},end:{line:238,column:3}},{start:{line:236,column:2},end:{line:238,column:3}}],line:236}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"214a2e430cfca29bccf3988f1f90d37d7ff334d9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1qr47l0jt4=function(){return actualCoverage;};}return actualCoverage;}cov_1qr47l0jt4();const express=(cov_1qr47l0jt4().s[0]++,require('express'));const app=(cov_1qr47l0jt4().s[1]++,express());const bodyParser=(cov_1qr47l0jt4().s[2]++,require("body-parser"));const axios=(cov_1qr47l0jt4().s[3]++,require('axios'));const cors=(cov_1qr47l0jt4().s[4]++,require('cors'));//swagger libraries
const swaggerJsDoc=(cov_1qr47l0jt4().s[5]++,require("swagger-jsdoc"));const swaggerUi=(cov_1qr47l0jt4().s[6]++,require("swagger-ui-express"));//middleware
cov_1qr47l0jt4().s[7]++;app.use(bodyParser.json());cov_1qr47l0jt4().s[8]++;app.use(cors({origin:'http://localhost:4200'}));//swagger
const swaggerOptions=(cov_1qr47l0jt4().s[9]++,{swaggerDefinition:{info:{version:"1.0.0",title:"Admin Microservice",description:"Admin microservice constains http methods to add, edit and delete flight",contact:{name:"BookMyFlight"},servers:["http://localhost:3100"]}},// ['.routes/*.js']
apis:["admin.js"]});//swagger middleware
const swaggerDocs=(cov_1qr47l0jt4().s[10]++,swaggerJsDoc(swaggerOptions));cov_1qr47l0jt4().s[11]++;app.use("/admin/api-docs",swaggerUi.serve,swaggerUi.setup(swaggerDocs));/* GET Methods */ //GET ALL FLIGHTS
/**
 * @swagger
 * /admin/flights:
 *  get:
 *    description: Use to get all flights
 *    responses:
 *      '200':
 *        description: A successful response
 *      '400':
 *        description: Server error.
 */cov_1qr47l0jt4().s[12]++;app.get('/admin/flights',(req,res)=>{cov_1qr47l0jt4().f[0]++;cov_1qr47l0jt4().s[13]++;axios.get("http://localhost:3000/flights").then(response=>{cov_1qr47l0jt4().f[1]++;cov_1qr47l0jt4().s[14]++;res.status(200).send(response.data);//console.log(response);
}).catch(err=>{cov_1qr47l0jt4().f[2]++;cov_1qr47l0jt4().s[15]++;res.status(404).json(`Error: ${err}`);// if(err){
//   //throw err;
//   res.status(404).json(`Error: ${err}`);
// }
});});/* POST Methods */ /*                        post method to add new flight by admin                 */ /**
 * @swagger
 * definitions:
 *  Flight:
 *   type: object
 *   properties:
 *    flightName:
 *      type: string
 *      description: Name of the flight
 *      example: 'GA-101'
 *    airLine:
 *      type: string
 *      description: name of the air-line
 *      example: 'Go-Air'
 *    source:
 *      type: string
 *      description: source
 *      example: 'mumbai'
 *    destination:
 *      type: string
 *      description: Destination
 *      example: 'delhi'
 *    fare:
 *      type: number
 *      description: fare of the flight
 *      example: 2000
 *    
 */ /**
 * @swagger
 * /admin/add/flight:
 *   post:
 *     tags:
 *       - Flights
 *     description: Creates a new flight
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: flight
 *         description: Flight object
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Flight'
 *     responses:
 *       200:
 *         description: Flight Successfully added
 *       400:
 *         description: Server Error
 */cov_1qr47l0jt4().s[16]++;app.post('/admin/add/flight',(req,res)=>{cov_1qr47l0jt4().f[3]++;var newFlight=(cov_1qr47l0jt4().s[17]++,{airLine:req.body.airLine,flightName:req.body.flightName,source:req.body.source,destination:req.body.destination,fare:req.body.fare});cov_1qr47l0jt4().s[18]++;axios.post("http://localhost:3000/flight/add",newFlight).then(response=>{cov_1qr47l0jt4().f[4]++;cov_1qr47l0jt4().s[19]++;res.status(200).send(response.data);cov_1qr47l0jt4().s[20]++;console.log("New flight added.");}).catch(err=>{cov_1qr47l0jt4().f[5]++;cov_1qr47l0jt4().s[21]++;if(err){cov_1qr47l0jt4().b[0][0]++;cov_1qr47l0jt4().s[22]++;//throw err;
res.status(400).json(`Error: ${err}`);}else{cov_1qr47l0jt4().b[0][1]++;}});});/* PUT Methods */ /*                       put method to edit flight by admin                */ /**
 * @swagger
 * /admin/edit/flight/{id}:
 *   put:
 *     tags:
 *       - Flights
 *     description: Creates a new flight
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: id
 *         description: flight object id
 *         in: path
 *         required: true
 *         schema:
 *          type: string
 *          description: user's object id
 *       - name: flight
 *         description: Flight object
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Flight'
 *     responses:
 *       200:
 *         description: Flight Successfully updated
 *       400:
 *         description: Server Error
 */cov_1qr47l0jt4().s[23]++;app.put('/admin/edit/flight/:id',(req,res)=>{cov_1qr47l0jt4().f[6]++;var newFlight=(cov_1qr47l0jt4().s[24]++,{airLine:req.body.airLine,flightName:req.body.flightName,source:req.body.source,destination:req.body.destination,fare:req.body.fare});cov_1qr47l0jt4().s[25]++;axios.put(`http://localhost:3000/flight/edit/${req.params.id}`,newFlight).then(response=>{cov_1qr47l0jt4().f[7]++;cov_1qr47l0jt4().s[26]++;//console.log(response.data);
res.status(200).send(response.data);}).catch(err=>{cov_1qr47l0jt4().f[8]++;cov_1qr47l0jt4().s[27]++;res.status(400).json(`Error: ${err}`);// if(err){
//   //throw err;
//   res.status(400).json(`Error: ${err}`);
// }
});});/* DELETE Methods */ /*                    delete method to delete flight by admin             */ /**
 * @swagger
 * /admin/delete/flight/{flightName}:
 *  delete:
 *    description: Use to delete flight by flight name
 *    responses:
 *      '200':
 *        description: Flight successfully deleted
 *      '400':
 *        description: Server error.
 *  parameters:
 *        - in: path
 *          name: flightName
 *          required: true
 *          schema:
 *            type: String
 *          description: Flight-Name
 */cov_1qr47l0jt4().s[28]++;app.delete('/admin/delete/flight/:flightName',(req,res)=>{cov_1qr47l0jt4().f[9]++;cov_1qr47l0jt4().s[29]++;axios.delete(`http://localhost:3000/flight/delete/${req.params.flightName}`).then(response=>{cov_1qr47l0jt4().f[10]++;cov_1qr47l0jt4().s[30]++;//console.log(response.data);
res.status(200).send(response.data);}).catch(err=>{cov_1qr47l0jt4().f[11]++;cov_1qr47l0jt4().s[31]++;res.status(400).json(`Error: ${err}`);// if(err){
//  // throw err;
//  res.status(400).json(`Error: ${err}`);
// }
});});cov_1qr47l0jt4().s[32]++;app.listen(3100,err=>{cov_1qr47l0jt4().f[12]++;cov_1qr47l0jt4().s[33]++;if(err){cov_1qr47l0jt4().b[1][0]++;cov_1qr47l0jt4().s[34]++;console.log(err);}else{cov_1qr47l0jt4().b[1][1]++;}cov_1qr47l0jt4().s[35]++;console.log("Listening to port 3100");});cov_1qr47l0jt4().s[36]++;module.exports=app;//current no use
// app.get('/admin/flight/:id', (req, res)=>{
//   axios.get("http://localhost:3000/flight/"+req.params.id).then((response) => {
//     res.send(response);
//   }).catch(err => {
//     if(err){
//       throw err;
//     }
//   })
// });
//current no use
//get flight by flightName
// app.get('/admin/flight/:flightName', (req, res)=>{
//   axios.get("http://localhost:3000/flight/"+req.params.flightName).then((response) => {
//     //console.log(response);
//     res.send(response);
//   }).catch(err => {
//     if(err){
//       throw err;
//     }
//   })
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,