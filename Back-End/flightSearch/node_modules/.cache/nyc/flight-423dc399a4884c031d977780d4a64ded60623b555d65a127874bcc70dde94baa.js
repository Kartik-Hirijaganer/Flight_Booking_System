function cov_2mtzys7cp9(){var path="D:\\Capgemini Training\\Kartik_Hirijaganer\\Flight-Booking\\Back-End\\flightSearch\\flight.js";var hash="378177284710d85d81e6755d35d26c9c953f670a";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"D:\\Capgemini Training\\Kartik_Hirijaganer\\Flight-Booking\\Back-End\\flightSearch\\flight.js",statementMap:{"0":{start:{line:1,column:16},end:{line:1,column:34}},"1":{start:{line:2,column:12},end:{line:2,column:21}},"2":{start:{line:3,column:19},end:{line:3,column:41}},"3":{start:{line:4,column:13},end:{line:4,column:28}},"4":{start:{line:7,column:21},end:{line:7,column:45}},"5":{start:{line:8,column:18},end:{line:8,column:47}},"6":{start:{line:11,column:0},end:{line:11,column:27}},"7":{start:{line:12,column:0},end:{line:12,column:49}},"8":{start:{line:14,column:17},end:{line:14,column:36}},"9":{start:{line:16,column:0},end:{line:16,column:29}},"10":{start:{line:17,column:15},end:{line:17,column:39}},"11":{start:{line:20,column:0},end:{line:20,column:140}},"12":{start:{line:21,column:0},end:{line:21,column:34}},"13":{start:{line:24,column:23},end:{line:38,column:1}},"14":{start:{line:41,column:20},end:{line:41,column:48}},"15":{start:{line:42,column:0},end:{line:42,column:75}},"16":{start:{line:67,column:0},end:{line:77,column:3}},"17":{start:{line:68,column:2},end:{line:76,column:4}},"18":{start:{line:69,column:4},end:{line:69,column:31}},"19":{start:{line:72,column:4},end:{line:75,column:5}},"20":{start:{line:74,column:6},end:{line:74,column:44}},"21":{start:{line:92,column:0},end:{line:101,column:3}},"22":{start:{line:93,column:2},end:{line:100,column:5}},"23":{start:{line:94,column:4},end:{line:94,column:31}},"24":{start:{line:96,column:4},end:{line:99,column:5}},"25":{start:{line:98,column:6},end:{line:98,column:44}},"26":{start:{line:132,column:0},end:{line:144,column:3}},"27":{start:{line:133,column:15},end:{line:133,column:46}},"28":{start:{line:134,column:13},end:{line:134,column:49}},"29":{start:{line:136,column:2},end:{line:143,column:4}},"30":{start:{line:137,column:4},end:{line:137,column:31}},"31":{start:{line:139,column:4},end:{line:142,column:5}},"32":{start:{line:141,column:6},end:{line:141,column:44}},"33":{start:{line:201,column:0},end:{line:220,column:3}},"34":{start:{line:202,column:18},end:{line:208,column:3}},"35":{start:{line:210,column:16},end:{line:210,column:37}},"36":{start:{line:211,column:2},end:{line:219,column:4}},"37":{start:{line:212,column:4},end:{line:212,column:38}},"38":{start:{line:213,column:4},end:{line:213,column:31}},"39":{start:{line:215,column:4},end:{line:218,column:5}},"40":{start:{line:217,column:6},end:{line:217,column:44}},"41":{start:{line:254,column:0},end:{line:276,column:3}},"42":{start:{line:256,column:18},end:{line:262,column:3}},"43":{start:{line:264,column:2},end:{line:268,column:4}},"44":{start:{line:266,column:4},end:{line:266,column:34}},"45":{start:{line:267,column:4},end:{line:267,column:35}},"46":{start:{line:298,column:0},end:{line:308,column:3}},"47":{start:{line:299,column:2},end:{line:307,column:4}},"48":{start:{line:300,column:4},end:{line:300,column:59}},"49":{start:{line:301,column:4},end:{line:301,column:35}},"50":{start:{line:303,column:4},end:{line:306,column:5}},"51":{start:{line:305,column:6},end:{line:305,column:44}},"52":{start:{line:313,column:0},end:{line:318,column:2}},"53":{start:{line:314,column:2},end:{line:316,column:3}},"54":{start:{line:315,column:4},end:{line:315,column:21}},"55":{start:{line:317,column:2},end:{line:317,column:40}},"56":{start:{line:320,column:0},end:{line:320,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:67,column:31},end:{line:67,column:32}},loc:{start:{line:67,column:43},end:{line:77,column:1}},line:67},"1":{name:"(anonymous_1)",decl:{start:{line:68,column:60},end:{line:68,column:61}},loc:{start:{line:68,column:68},end:{line:71,column:3}},line:68},"2":{name:"(anonymous_2)",decl:{start:{line:71,column:11},end:{line:71,column:12}},loc:{start:{line:71,column:18},end:{line:76,column:3}},line:71},"3":{name:"(anonymous_3)",decl:{start:{line:92,column:20},end:{line:92,column:21}},loc:{start:{line:92,column:34},end:{line:101,column:1}},line:92},"4":{name:"(anonymous_4)",decl:{start:{line:93,column:21},end:{line:93,column:22}},loc:{start:{line:93,column:31},end:{line:95,column:3}},line:93},"5":{name:"(anonymous_5)",decl:{start:{line:95,column:11},end:{line:95,column:12}},loc:{start:{line:95,column:18},end:{line:100,column:3}},line:95},"6":{name:"(anonymous_6)",decl:{start:{line:132,column:41},end:{line:132,column:42}},loc:{start:{line:132,column:55},end:{line:144,column:1}},line:132},"7":{name:"(anonymous_7)",decl:{start:{line:136,column:55},end:{line:136,column:56}},loc:{start:{line:136,column:63},end:{line:138,column:3}},line:136},"8":{name:"(anonymous_8)",decl:{start:{line:138,column:11},end:{line:138,column:12}},loc:{start:{line:138,column:18},end:{line:143,column:3}},line:138},"9":{name:"(anonymous_9)",decl:{start:{line:201,column:24},end:{line:201,column:25}},loc:{start:{line:201,column:36},end:{line:220,column:1}},line:201},"10":{name:"(anonymous_10)",decl:{start:{line:211,column:22},end:{line:211,column:23}},loc:{start:{line:211,column:31},end:{line:214,column:3}},line:211},"11":{name:"(anonymous_11)",decl:{start:{line:214,column:11},end:{line:214,column:12}},loc:{start:{line:214,column:18},end:{line:219,column:3}},line:214},"12":{name:"(anonymous_12)",decl:{start:{line:254,column:28},end:{line:254,column:29}},loc:{start:{line:254,column:42},end:{line:276,column:1}},line:254},"13":{name:"(anonymous_13)",decl:{start:{line:265,column:43},end:{line:265,column:44}},loc:{start:{line:265,column:57},end:{line:268,column:3}},line:265},"14":{name:"(anonymous_14)",decl:{start:{line:298,column:41},end:{line:298,column:42}},loc:{start:{line:298,column:55},end:{line:308,column:1}},line:298},"15":{name:"(anonymous_15)",decl:{start:{line:299,column:68},end:{line:299,column:69}},loc:{start:{line:299,column:82},end:{line:302,column:3}},line:299},"16":{name:"(anonymous_16)",decl:{start:{line:302,column:11},end:{line:302,column:12}},loc:{start:{line:302,column:18},end:{line:307,column:3}},line:302},"17":{name:"(anonymous_17)",decl:{start:{line:313,column:17},end:{line:313,column:18}},loc:{start:{line:313,column:26},end:{line:318,column:1}},line:313}},branchMap:{"0":{loc:{start:{line:72,column:4},end:{line:75,column:5}},type:"if",locations:[{start:{line:72,column:4},end:{line:75,column:5}},{start:{line:72,column:4},end:{line:75,column:5}}],line:72},"1":{loc:{start:{line:96,column:4},end:{line:99,column:5}},type:"if",locations:[{start:{line:96,column:4},end:{line:99,column:5}},{start:{line:96,column:4},end:{line:99,column:5}}],line:96},"2":{loc:{start:{line:139,column:4},end:{line:142,column:5}},type:"if",locations:[{start:{line:139,column:4},end:{line:142,column:5}},{start:{line:139,column:4},end:{line:142,column:5}}],line:139},"3":{loc:{start:{line:215,column:4},end:{line:218,column:5}},type:"if",locations:[{start:{line:215,column:4},end:{line:218,column:5}},{start:{line:215,column:4},end:{line:218,column:5}}],line:215},"4":{loc:{start:{line:303,column:4},end:{line:306,column:5}},type:"if",locations:[{start:{line:303,column:4},end:{line:306,column:5}},{start:{line:303,column:4},end:{line:306,column:5}}],line:303},"5":{loc:{start:{line:314,column:2},end:{line:316,column:3}},type:"if",locations:[{start:{line:314,column:2},end:{line:316,column:3}},{start:{line:314,column:2},end:{line:316,column:3}}],line:314}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"378177284710d85d81e6755d35d26c9c953f670a"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2mtzys7cp9=function(){return actualCoverage;};}return actualCoverage;}cov_2mtzys7cp9();const express=(cov_2mtzys7cp9().s[0]++,require("express"));const app=(cov_2mtzys7cp9().s[1]++,express());const bodyParser=(cov_2mtzys7cp9().s[2]++,require("body-parser"));const cors=(cov_2mtzys7cp9().s[3]++,require('cors'));//swagger libraries
const swaggerJsDoc=(cov_2mtzys7cp9().s[4]++,require("swagger-jsdoc"));const swaggerUi=(cov_2mtzys7cp9().s[5]++,require("swagger-ui-express"));//middleware
cov_2mtzys7cp9().s[6]++;app.use(bodyParser.json());cov_2mtzys7cp9().s[7]++;app.use(cors({origin:'http://localhost:4200'}));const mongoose=(cov_2mtzys7cp9().s[8]++,require('mongoose'));cov_2mtzys7cp9().s[9]++;require("./flightDataModel");//acquiring our schema file
const flight=(cov_2mtzys7cp9().s[10]++,mongoose.model("flight"));//assigning schema model to flight constant
//connecting mongoDB atlas dbName: flight_project, password:1234
cov_2mtzys7cp9().s[11]++;mongoose.connect('mongodb+srv://Kartik:1234@cluster0.nvlfp.mongodb.net/flight_project',{useNewUrlParser:true,useUnifiedTopology:true});cov_2mtzys7cp9().s[12]++;console.log('Database connected');//swagger
const swaggerOptions=(cov_2mtzys7cp9().s[13]++,{swaggerDefinition:{info:{version:"1.0.0",title:"Flight Microservice",description:"Flight microservice constains http methods will be used by admin",contact:{name:"BookMyFlight"},servers:["http://localhost:3000"]}},// ['.routes/*.js']
apis:["flight.js"]});//swagger middleware
const swaggerDocs=(cov_2mtzys7cp9().s[14]++,swaggerJsDoc(swaggerOptions));cov_2mtzys7cp9().s[15]++;app.use("/flight/api-docs",swaggerUi.serve,swaggerUi.setup(swaggerDocs));/* GET Methods */ //GET FLIGHT BY FLIGHT-NAME
/**
 * @swagger
 * /flight/{flightName}:
 *  get:
 *    description: Use to get all flights
 *    responses:
 *      '200':
 *        description: A successful response
 *      '404':
 *        description: Server error.
 *  parameters:
 *        - in: path
 *          name: flightName
 *          required: true
 *          schema:
 *            type: String
 *          description: Flight-Name
 */cov_2mtzys7cp9().s[16]++;app.get('/flight/:flightName',(req,res)=>{cov_2mtzys7cp9().f[0]++;cov_2mtzys7cp9().s[17]++;flight.findOne({flightName:req.params.flightName}).then(data=>{cov_2mtzys7cp9().f[1]++;cov_2mtzys7cp9().s[18]++;res.status(200).send(data);// console.log(data);
}).catch(err=>{cov_2mtzys7cp9().f[2]++;cov_2mtzys7cp9().s[19]++;if(err){cov_2mtzys7cp9().b[0][0]++;cov_2mtzys7cp9().s[20]++;//throw err;
res.status(404).json(`Error: ${err}`);}else{cov_2mtzys7cp9().b[0][1]++;}});});//RETURN ALL FLIGHTS 
/**
 * @swagger
 * /flights:
 *  get:
 *    description: Use to get all flights
 *    responses:
 *      '200':
 *        description: A successful response
 *      '404':
 *        description: Server error.
 */cov_2mtzys7cp9().s[21]++;app.get('/flights',(req,res)=>{cov_2mtzys7cp9().f[3]++;cov_2mtzys7cp9().s[22]++;flight.find().then(data=>{cov_2mtzys7cp9().f[4]++;cov_2mtzys7cp9().s[23]++;res.status(200).send(data);}).catch(err=>{cov_2mtzys7cp9().f[5]++;cov_2mtzys7cp9().s[24]++;if(err){cov_2mtzys7cp9().b[1][0]++;cov_2mtzys7cp9().s[25]++;//throw err;
res.status(404).json(`Error: ${err}`);}else{cov_2mtzys7cp9().b[1][1]++;}});});/*              RETURN FLIGHTS BY SOURCE & DESTINATION              */ /**
 * @swagger
 * /flights/{source}/{destination}:
 *  get:
 *    description: Use to get flights by source and destination
 *    responses:
 *      '200':
 *        description: A successful response
 *      '400':
 *        description: Server error.
 *  parameters:
 *        - in: path
 *          name: source
 *          required: true
 *          schema:
 *            type: String
 *          description: Source
 * 
 *        - in: path
 *          name: destination
 *          required: true
 *          schema:
 *            type: String
 *          description: Destination
 */cov_2mtzys7cp9().s[26]++;app.get("/flights/:source/:destination",(req,res)=>{cov_2mtzys7cp9().f[6]++;let source=(cov_2mtzys7cp9().s[27]++,req.params.source.toLowerCase());let dest=(cov_2mtzys7cp9().s[28]++,req.params.destination.toLowerCase());cov_2mtzys7cp9().s[29]++;flight.find({source:source,destination:dest}).then(data=>{cov_2mtzys7cp9().f[7]++;cov_2mtzys7cp9().s[30]++;res.status(200).send(data);}).catch(err=>{cov_2mtzys7cp9().f[8]++;cov_2mtzys7cp9().s[31]++;if(err){cov_2mtzys7cp9().b[2][0]++;cov_2mtzys7cp9().s[32]++;//throw err;
res.status(400).json(`Error: ${err}`);}else{cov_2mtzys7cp9().b[2][1]++;}});});/* POST Methods */ //ADD NEW FLIGHT
//app.use(express.json());
/**
 * @swagger
 * definitions:
 *  Flight:
 *   type: object
 *   properties:
 *    flightName:
 *      type: string
 *      description: Name of the flight
 *      example: 'GA-101'
 *    airLine:
 *      type: string
 *      description: name of the air-line
 *      example: 'Go-Air'
 *    source:
 *      type: string
 *      description: source
 *      example: 'mumbai'
 *    destination:
 *      type: string
 *      description: Destination
 *      example: 'delhi'
 *    fare:
 *      type: number
 *      description: fare of the flight
 *      example: 2000
 *    
 */ /**
 * @swagger
 * /flight/add:
 *   post:
 *     tags:
 *       - Flights
 *     description: Creates a new flight
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: flight
 *         description: Flight object
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Flight'
 *     responses:
 *       200:
 *         description: Flight Successfully added
 *       400:
 *         description: Server Error
 */cov_2mtzys7cp9().s[33]++;app.post('/flight/add',(req,res)=>{cov_2mtzys7cp9().f[9]++;var newFlight=(cov_2mtzys7cp9().s[34]++,{airLine:req.body.airLine,flightName:req.body.flightName,source:req.body.source,destination:req.body.destination,fare:req.body.fare});var flight1=(cov_2mtzys7cp9().s[35]++,new flight(newFlight));cov_2mtzys7cp9().s[36]++;flight1.save().then(data=>{cov_2mtzys7cp9().f[10]++;cov_2mtzys7cp9().s[37]++;console.log('new flight created');cov_2mtzys7cp9().s[38]++;res.status(200).send(data);}).catch(err=>{cov_2mtzys7cp9().f[11]++;cov_2mtzys7cp9().s[39]++;if(err){cov_2mtzys7cp9().b[3][0]++;cov_2mtzys7cp9().s[40]++;//throw err;
res.status(400).json(`Error: ${err}`);}else{cov_2mtzys7cp9().b[3][1]++;}});});/* PUT Methods */ //UPDATE FLIGHT     
/**
 * @swagger
 * /flight/edit/{id}:
 *   put:
 *     tags:
 *       - Flights
 *     description: Creates a new flight
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: id
 *         description: flight object id
 *         in: path
 *         required: true
 *         schema:
 *          type: string
 *          description: user's object id
 *       - name: flight
 *         description: Flight object
 *         in: body
 *         required: true
 *         schema:
 *           $ref: '#/definitions/Flight'
 *     responses:
 *       200:
 *         description: Flight Successfully updated
 *       400:
 *         description: Server Error
 */cov_2mtzys7cp9().s[41]++;app.put('/flight/edit/:id',(req,res)=>{cov_2mtzys7cp9().f[12]++;var newFlight=(cov_2mtzys7cp9().s[42]++,{airLine:req.body.airLine,flightName:req.body.flightName,source:req.body.source,destination:req.body.destination,fare:req.body.fare});//var update = { "$set": { "name": name, "genre": genre, "author": author, "similar": similar}}
cov_2mtzys7cp9().s[43]++;flight.findByIdAndUpdate(req.params.id,{"$set":newFlight},{new:true}).then(response=>{cov_2mtzys7cp9().f[13]++;cov_2mtzys7cp9().s[44]++;console.log(`flight updated`);cov_2mtzys7cp9().s[45]++;res.status(200).send(response);});// .catch(err => {
//   if(err){
//     //throw err;
//     res.status(400).json(`Error: ${err}`);
//   }
// }
// )
});/* DELETE Methods */ //DELETE FLIGHT
/**
 * @swagger
 * /flight/delete/{flightName}:
 *  delete:
 *    description: Use to delete flight by flight name
 *    responses:
 *      '200':
 *        description: Flight successfully deleted
 *      '400':
 *        description: Server error.
 *  parameters:
 *        - in: path
 *          name: flightName
 *          required: true
 *          schema:
 *            type: String
 *          description: Flight-Name
 */cov_2mtzys7cp9().s[46]++;app.delete('/flight/delete/:flightName',(req,res)=>{cov_2mtzys7cp9().f[14]++;cov_2mtzys7cp9().s[47]++;flight.findOneAndRemove({flightName:req.params.flightName}).then(response=>{cov_2mtzys7cp9().f[15]++;cov_2mtzys7cp9().s[48]++;console.log(`${req.params.flightName} flight deleted`);cov_2mtzys7cp9().s[49]++;res.status(200).send(response);}).catch(err=>{cov_2mtzys7cp9().f[16]++;cov_2mtzys7cp9().s[50]++;if(err){cov_2mtzys7cp9().b[4][0]++;cov_2mtzys7cp9().s[51]++;//throw err;
res.status(400).json(`Error: ${err}`);}else{cov_2mtzys7cp9().b[4][1]++;}});});cov_2mtzys7cp9().s[52]++;app.listen(3000,err=>{cov_2mtzys7cp9().f[17]++;cov_2mtzys7cp9().s[53]++;if(err){cov_2mtzys7cp9().b[5][0]++;cov_2mtzys7cp9().s[54]++;console.log(err);}else{cov_2mtzys7cp9().b[5][1]++;}cov_2mtzys7cp9().s[55]++;console.log("Listening to port 3000");});cov_2mtzys7cp9().s[56]++;module.exports=app;//no current use
//will get by flight id
// app.get('/flight/:id', (req, res) => {
//   flight.findById(req.params.id).then((data)=>{
//     res.send(data);
//   }).catch(err => {
//     if(err){
//       throw err;
//     }
//   })
// });
//current no use
// app.delete('/flight/delete/:id', (req, res) => {
//   flight.findByIdAndRemove(req.params.id).then((response) => {
//     //res.send(`${req.params.flightName} flight deleted`);
//     console.log("flight deleted");
//     console.log(response);
//     res.send(response);
//   }).catch(err => {
//     if(err){
//       throw err;
//     }
//   })
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,